//var StorageArea = chrome.storage.local; // for local storage only//var StorageArea = chrome.storage.sync;  // for local + synced storage. ..fallsback to local if offline.////function storeValue() {//	var inputValue = document.getElementById('stored_input').value;//	console.log('trying to store value ' + inputValue);////	// store the value - input should be object with key:Value pairs.//	StorageArea.set({storeValue: inputValue}, function() {console.log('storage successful!!!')});//}////function retrieveValue() {//	var valueKey = 'storeValue';//	// find the value - input is key or array of keys, output is the object with key:Value Pairs.//	StorageArea.get(valueKey, function(results) {//									// get the result and display it (if result is present)//									if (results[valueKey]) {//										console.log('found results - key: ' + valueKey + ' value: ' + results[valueKey]);//										document.getElementById('retrieved_value').innerHTML = results[valueKey];//									}//									else//										console.log('no results found for key: ' + valueKey);//								  }//	);//}// Add all the event listeners below//$(document).ready(function() {//    document.getElementById('store_value').addEventListener('click', storeValue, false);//    document.getElementById('get_value').addEventListener('click', retrieveValue, false);//});//  Various DataBase APIs go here// Chrome Storage APIvar chromeStorageAPI = (function() {	var storageArea = chrome.storage.sync;		return {		get : function(keys, callback) {			storageArea.get(keys, callback);		},		set : function(keyValuePairObject, callback) {			storageArea.set(keyValuePairObject, callback);		}	};})();/*	Generic Storage API Provider.   General interface of an StorageAPI would be as follows   get the stored value -- async call, use the callback to process the returned result.		 keys - string or array of strings/object		 callback - it should be like function(items){...}; 		 items --> Object with stuffs in their key-value mappings.   get : function(keys, callback)	   set the key value pairs present in the keyValuePairObject, async call.		   keyValuePairObject - object which gives each key/value pair to update storage with		   callback should be like function() { ... };   set : function(keyValuePairObject, callback)*/var storageAPIProvider = ( function() {	return {		getStorageAPI : function(type) {			if (type === SokobanUtil.storageType.CHROME_API)				return chromeStorageAPI;			return null;		}	};})();// state of the level.function LevelState(levelNo) {    this.levelNo = levelNo;    this.solutionMoves = -1; // default moves.}LevelState.prototype.setSolutionMoves = function(moves) {    this.solutionMoves = moves;};